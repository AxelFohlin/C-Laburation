#include <iostream>

#include "assembler.hpp"
#include <string>
#include <vector>
#include <fstream>
using namespace std;


int main()
{

	bool running = true;

	while (running && cin.good())
	{
		string input;
		vector<string> splitargs;
		cout << "> ";
		getline(cin, input);
		int startPosition = 0;
		int endPosition = input.find(" ");
		while (endPosition != string::npos)
		{
			splitargs.push_back(input.substr(startPosition, endPosition - startPosition));
			startPosition = endPosition + 1;
			endPosition = input.find(" ", startPosition);

		}
		splitargs.push_back(input.substr(startPosition));
		if (splitargs[0] == "run" && splitargs.size() > 1 && splitargs.size() <= (REGISTER_SIZE + 2)) 
		{
			int registers[REGISTER_SIZE]{ 0 };
			for (int i = 2; i < splitargs.size(); i++)
			{
				registers[i - 2] = stoi(splitargs[i]);
			}
			vector<vector<string>> commandList;
			vector<string> command;
			string args1 = splitargs[1];
			if (BuildCommandList(commandList, args1) == false)
			{
				cout << "Error: Could not open file '{args[1]}'. Try again." << endl;
			}
			else

			{
				while (PeekNextCommandIndex(registers) < commandList.size())
				{
					command = commandList[GetAndStepCommandIndex(registers)];
					if (command[0] == "MOV")
					{
						MOV(command, registers);
					}
					else if (command[0] == "ADD")
					{
						ADD(command, registers);
					}
					else if (command[0] == "SUB")
					{
						SUB(command, registers);
					}
					else if (command[0] == "CMP")
					{
						CMP(command, registers);
					}
					else if (command[0] == "JEQ")
					{
						JEQ(command, registers);
					}
					else if (command[0] == "JGT")
					{
						JGT(command, registers);
					}
					else if (command[0] == "JLT")
					{
						JLT(command, registers);
					}
				}
				string reg_line;
				for (int i = 0; i < REGISTER_SIZE; i++)
				{
					reg_line += to_string(registers[i]) + " ";
				}
				cout << reg_line << endl;

			}
		}
		else if (splitargs[0] == "exit")
		{
			cout << "Good Bye" << endl;
			running = false;
		}
		else
		{
			cout << "Error: Invalid command or number of arguments. Try again." << endl;
			cout << "---------------------------------------------------" << endl;
			cout << "Available commands:\n" << endl;
			cout << "> run program.asm (R0) (R1) ... (R7)" << endl;
			cout << "> run program.asm (R0) (R1) ... (R7)" << endl;
			cout << "\tof the assembly file and (R0), (R1), ... (R7) is" << endl;
			cout << "\tthe optional initial values for the registers R0," << endl;
			cout << "\tR1, ... R7." << endl;
			cout << "> exit" << endl;
			cout << "\tCloses the application." << endl;
			cout << "---------------------------------------------------" << endl;

		}
	}

	return 0;
}



